class Solution {
public:
	int rob(vector<int>& nums) {
		int sizeNums = nums.size();
		//对size==0、1、2时的特殊判断
		if (sizeNums == 0) return 0;
		vector<int> dp(nums.size());
		//边界值
		dp[0] = nums[0];//第1个房屋可盗窃的最大值
        if(nums.size()==1)
        return dp[0];
		dp[1] = max(nums[1], dp[0]);//第2个房屋可盗窃的最大值
        if(nums.size()==2)
        return dp[1];
		//状态转移
		//偷1房间不偷n房间
		for (int i = 2; i < nums.size() ; i++)
		{
			if (i != nums.size()-1)
				dp[i] = max(dp[i - 1], nums[i] + dp[i - 2]);
			else dp[i] = dp[i - 1];
		}
		int maxOne = dp[nums.size()-1];
		//偷n房间，不偷1房间
		dp[1] = nums[1];
		dp[2] = max(nums[2], dp[1]);
		for (int i = 3; i < nums.size() ; i++)
		{
			dp[i] = max(dp[i - 1], nums[i] + dp[i - 2]);
		}
		return max(maxOne, dp[nums.size()-1]);
	}
};
