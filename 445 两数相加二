/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* n=new ListNode(NULL);
        stack<ListNode*> data1;
        stack<ListNode*> data2;
        ListNode* l=l1;
        ListNode* r=l2;
        int carry=0;
        while(l!=NULL)
        {
            data1.push(l);
            l=l->next;
        }
        while(r!=NULL)
        {
            data2.push(r);
            r=r->next;
        }
        while(data1.empty()!=1&&data2.empty()!=1)
        {
            ListNode* temp1=data1.top();
            ListNode* temp2=data2.top();
            int val=temp1->val+temp2->val;
            val=val+carry;
            carry=val/10;
            ListNode* s=new ListNode(val%10);
            s->next=n->next;
            n->next=s;
            data1.pop();
            data2.pop();
        }
        while(data1.empty()==1&&data2.empty()!=1)
        {
            ListNode* temp=data2.top();
            int val=temp->val+carry;
            carry=val/10;
            ListNode* s=new ListNode(val%10);
            s->next=n->next;
            n->next=s;
            data2.pop();
        }
        while(data2.empty()==1&&data1.empty()!=1)
        {
            ListNode* temp=data1.top();
            int val=temp->val+carry;
            carry=val/10;
            ListNode* s=new ListNode(val%10);
            s->next=n->next;
            n->next=s;
            data1.pop();
        }
        if(carry)
        {
            ListNode* s=new ListNode(carry);
            s->next=n->next;
            n->next=s;
        }
        return n->next;
    }
};
