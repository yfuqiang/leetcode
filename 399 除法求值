class Solution {
public:
    bool find=false;
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        unordered_map<string,vector<pair<string,double>>> g;
        for(int i=0;i<equations.size();i++)
        {
            g[equations[i][0]].push_back(make_pair(equations[i][1],1/values[i]));
            g[equations[i][1]].push_back(make_pair(equations[i][0],values[i]));
        }
        vector<double> ans(queries.size());
        for(int i=0;i<queries.size();i++)
        {
            string start=queries[i][1];
            string end=queries[i][0];
            if(g.find(start) == g.end() || g.find(end) == g.end())//起始点有一个不在图中
                ans[i] = -1.0;
            else if(start == end)
                ans[i] = 1.0;
            else
            {
                unordered_set<string> visited;
                visited.insert(start);
                ans[i]=1.0;
                find=false;
                dfs(start,end,start,g,ans[i],visited);
                if(!find)
                ans[i]=-1.0;
            }

        }
        return ans;
    }
void dfs(const string& start, const string& end, string& temp,  unordered_map<string, vector<pair<string, double>>>& g, double& ans, unordered_set<string>& visited){
       
        if (temp == end){
            find = true;
            return;
        }
        string back = temp;
        for(auto it = g[temp].begin(); it != g[temp].end(); it++){
            if(visited.find(it->first) == visited.end()){
                visited.insert(it->first);
                ans *= it->second;
                temp = it->first;
                dfs(start, end, temp, g, ans, visited);
                if(find) return;
                temp = back;
                ans /= it->second;
            }
        }
    }

};
