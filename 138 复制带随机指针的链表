/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(head==NULL)
        return NULL;
        unordered_map<Node*,Node*> m;
        Node* pre=new Node(head->val);
        Node* s=pre;
        Node* pree=head;
        
        head=head->next;
        while(head!=NULL)
        {
          Node *p=new Node(head->val);
          pre->next=p;
          m.insert(make_pair(pree,pre));
          pree=head;
          pre=p;
          head=head->next;
        }
        m.insert(make_pair(pree,pre));
        for(auto c:m)
        {
            if(m.find(c.first->random)!=m.end())
            {
                c.second->random=m[c.first->random];
            }
        }
        return s;

    }
};
