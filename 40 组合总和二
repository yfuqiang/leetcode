class Solution {
public:
    vector<vector<int>> res={};
    vector<int> g;
    void dfs(vector<int> candidates,int begin,int target)
    {
        if(target==0)
        {
            res.push_back(g);
            return;
        }
        int i;
        if(begin==candidates.size()|| target<candidates[begin])
        return;
        for(i=begin;i<candidates.size();i++)
        {
            if(target>=candidates[i])
            {
            g.push_back(candidates[i]);
            dfs(candidates,i+1,target-candidates[i]);
            g.pop_back();
            }
            else
            break;
        }
        return;
    }

    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        dfs(candidates,0,target);
        vector<vector<int>> result;
        set<vector<int>> s;
        for(int i=0;i<res.size();i++)
        {
            s.insert(res[i]);
        }
        for(auto m:s)
        {
            result.push_back(m);
        }
        return result;
    }

};
