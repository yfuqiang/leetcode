class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        if (n == 1)
	        return { 0 };
	    else if (n == 2)
		    return{ 0,1 };
        vector<int> indegree(n);
        vector<vector<int>> graph(n);
        int i,j;
        for(i=0;i<edges.size();i++)
        {
            indegree[edges[i][1]]++;
            indegree[edges[i][0]]++;
            graph[edges[i][0]].push_back(edges[i][1]);
            graph[edges[i][1]].push_back(edges[i][0]);
        }
        queue<int> q;
        for(i=0;i<indegree.size();i++)
        {
            if(indegree[i]==1)
            q.push(i);
        }
        while(n>2)
        {
            int count=q.size();
            n-=count;
            while(count>0)
            {
                int k=q.front();
                q.pop();
                indegree[k]--;
                for(i=0;i<graph[k].size();i++)
                {
                    if(indegree[graph[k][i]]!=0)
                    {
                        indegree[graph[k][i]]--;
                        if(indegree[graph[k][i]]==1)
                        q.push(graph[k][i]);
                    }
                }
                count--;
            }   
        }
        vector<int> res;
        while(q.empty()!=1)
        {
            res.push_back(q.front());
            q.pop();
        }
        return res;
    }
};
