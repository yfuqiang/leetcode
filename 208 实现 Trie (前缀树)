class Trie {
public:
    bool isend;
    Trie* next[26];
    /** Initialize your data structure here. */
    Trie() {
        isend=0;
        for(int i=0;i<26;i++)
        next[i]=NULL;
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
            Trie* p=this;//根节点
            for(auto c: word)
            {
                if(p->next[c-'a']==NULL)
                p->next[c-'a']=new Trie();
                p=p->next[c-'a'];//无论如何都执行

            }
            p->isend=true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
          Trie* p=this;
          for(auto c:word)
          {
              p=p->next[c-'a'];
              if(p==NULL)
              return false;
          }
          return p->isend;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
           Trie* p=this;
          for(auto c:prefix)
          {
              p=p->next[c-'a'];
              if(p==NULL)
              return false;
          }
          return true;           
    }
    
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
