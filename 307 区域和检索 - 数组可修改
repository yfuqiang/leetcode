class NumArray {
public:
    NumArray(vector<int>& nums) : nums(nums){
       int i;
       for(i=0;i<=nums.size();i++)
       {
           c.push_back(0);
       }
       for(int i=0;i<nums.size();i++)
       {
           add(i,nums[i]);
       }
    }
     int lowbit(int x) {
        return x & (-x);
    }
    void add(int i,int n)
    {
        int k;
        for(k=i+1;k<=nums.size();k+=lowbit(k))
        {
            c[k]+=n;
        }
    }
    
    void update(int i, int val) {
        int add = val - nums[i];
        nums[i] = val;
        for (int k = i + 1; k <= nums.size(); k += lowbit(k)) {
           c[k] += add;
        }
 
    }

    int getSum(int i) {
        int sum = 0;
        for (int k = i; k > 0; k -= lowbit(k)) {
            sum += c[k];
        }
        return sum;
    }

    int sumRange(int i, int j) {
          return getSum(j + 1) - getSum(i);
    }
    vector<int> c;
    vector<int> nums;
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray* obj = new NumArray(nums);
 * obj->update(i,val);
 * int param_2 = obj->sumRange(i,j);
 */
