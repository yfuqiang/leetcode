class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        if(nums.size()==0)
        return {};
        sort(nums.begin(),nums.end());
        int i,j;
        vector<int> next(nums.size(),-1);
        vector<int> dp(nums.size(),1);
        int max=0;
        int maxid=0;
        for(i=0;i<nums.size();i++)
        {
            for(j=0;j<i;j++)
            {
                if(nums[i]%nums[j]==0&&(dp[i]<=dp[j]))
                {
                    dp[i]=dp[j]+1;
                    next[i]=j;
                }
            }
            if(dp[i]>max)
            {
                max=dp[i];
                maxid=i;
            }
        }
        vector<int> res;
        while(maxid>=0)
        {        
            res.push_back(nums[maxid]);
            maxid=next[maxid];
        }
        reverse(res.begin(),res.end());
        return res;
    }
   
};
