class LRUCache {
public:
    LRUCache(int capacity) {
        count=capacity;
    }
    
    int get(int key) {
        if(m.find(key)==m.end())
        return -1;
        else
        {
            pair<int,int> kk=*m[key];
            ll.erase(m[key]);
            ll.push_front(kk);
            m[key]=ll.begin();
            return kk.second;
        }
    }
    
    void put(int key, int value) {
        if(m.find(key)==m.end())
        {
            if(ll.size()==count)
            {
                auto back=ll.back();
                int aa=back.first;
                m.erase(aa);
                ll.pop_back();
            }
            
            ll.push_front(make_pair(key, value));
            m[key] = ll.begin();
            
        }
        else
        {
            ll.erase(m[key]);
            ll.push_front(make_pair(key, value));
            m[key]=ll.begin();
        }
    }
    int count;
    list<pair<int,int>> ll;
    map<int,list<pair<int,int>>::iterator> m;
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
